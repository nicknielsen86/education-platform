apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
apply plugin: 'maven'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    testOptions {
        unitTests.returnDefaultValues = true
//        unitTests.all { Gradle 2.13
//            jacoco {
//                includeNoLocationClasses = true
//            }
//        }

    }

    // be sure to support straight Java 6
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_7
//        targetCompatibility JavaVersion.VERSION_1_7
//    }
}

dependencies {
    compile 'org.dbtools:dbtools-query:3.0.0'
    compile 'com.google.code.findbugs:jsr305:3.0.1'

    // optional
    provided 'io.reactivex:rxjava:1.1.5'
    provided "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    provided 'joda-time:joda-time:2.9.3'
    provided 'org.threeten:threetenbp:1.3.1'

    provided 'org.sqlite:sqlite-android-base:3.8.8.1-20150126'
    provided 'net.sqlcipher:sqlcipher:3.1.0.20140823'
    provided 'org.xerial:sqlite-jdbc:3.8.11.2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.52-beta'
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
    }
}

def coverageSourceDirs = [
        'src/main/java',
]

jacoco {
    toolVersion "0.7.2.201409121644"
    //    toolVersion "0.7.6.201602180812" Gradle 2.13
}

task testDebugJacoco(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )
    reports {
        xml.enabled = true
        html.enabled = true
    }
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
}

// =============== Maven Deployment ===============
// ./gradlew clean check installLocal
task installLocal(type: Upload) {
    description "Installs the artifacts to the local Maven repository."
    configuration = configurations['archives']
    repositories {
        mavenDeployer {
            repository (url: "file://${System.env.HOME}/.m2/repository/")
            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME
            pom.packaging = POM_PACKAGING
            uniqueVersion = false // don't put in a timestamp on the filename (other project will not be able to depend on it)
        }
    }
}

// DEPLOY to Maven Central (this must be the last line of this file)
// ./gradlew clean check uploadArchives
apply from: rootProject.file('gradle/gradle-mvn-push.gradle')